---
import BaseLayout from "@layouts/BaseLayout.astro";
import LogoutButton from "@components/LogoutButton.astro";
import { db, Item, CartItem, eq } from "astro:db";

const title = "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤";
const description = "";

const user = await Astro.session?.get("user");

if (!user) {
  return Astro.redirect("/login");
}

const items = await db.select().from(Item);
const cartItemIds = (await db.select().from(CartItem).where(eq(CartItem.userId, user?.id))).map(i => i.itemId);
---

<BaseLayout {title} {description}>
  <h1>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</h1>
  <LogoutButton message="–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã" />
  <table>
    <tr>
      <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
      <th>–¶–µ–Ω–∞</th>
      <th>–ö–æ–ª-–≤–æ</th>
      <th />
    </tr>
    {
      items.map((item) => (
        <tr>
          {user.isManager ? (
            <td>
              <input value={item.name} data-item-id={item.id} data-name />
            </td>
            <td>
              <input value={item.price} type="number" min="0" max="100000000" data-item-id={item.id} data-price />
            </td>
            <td>
              <input value={item.unitsInStock} type="number" min="1" max="100000" data-item-id={item.id} data-amount />
            </td>
            <td>
              <button class="save-item" data-item-id={item.id}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä</button>
              <button class="delete-item" data-item-id={item.id}>–£–¥–∞–ª–∏—Ç—å (!) —Ç–æ–≤–∞—Ä</button>
            </td>
          ) : (
            <td>{item.name}</td>
            <td>{item.price}‚ÇΩ</td>
            <td>{item.unitsInStock}</td>
            <td>
              {
                cartItemIds.includes(item.id) ? (
                  <button class="remove-from-cart" data-item-id={item.id}>üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã</button>
                ) : (
                  <button class="add-to-cart" data-item-id={item.id} disabled={item.unitsInStock < 1}>üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É</button>
                )
              }
            </td>
          )}
        </tr>
      ))
    }
    {
      user.isManager && (
        <tr>
          <td>
            <input id="new-item-name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" />
          </td>
          <td>
            <input id="new-item-price" placeholder="–¶–µ–Ω–∞" type="number" min="0" max="100000000" />
          </td>
          <td>
            <input id="new-item-amount" placeholder="–ö–æ–ª-–≤–æ" type="number" min="1" max="100000" />
          </td>
          <td>
            <button id="add-new-item">–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</button>
          </td>
        </tr>
      )
    }
  </table>
  {!user.isManager && (
    <a href="/cart">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É</a>
    <br />
  )}
  <a href="/orders">–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</a>
</BaseLayout>

<script>
  import { actions } from "astro:actions";

  const { data: user } = await actions.auth.whoami();

  if (user?.isManager) {
    const addNewItemButton = document.getElementById("add-new-item") as HTMLButtonElement;
    const newItemNameInput = document.getElementById("new-item-name") as HTMLInputElement;
    const newItemPriceInput = document.getElementById("new-item-price") as HTMLInputElement;
    const newItemAmountInput = document.getElementById("new-item-amount") as HTMLInputElement;

    // save, delete
    const saveItemButtons = document.querySelectorAll<HTMLButtonElement>(".save-item");
    const deleteItemButtons = document.querySelectorAll<HTMLButtonElement>(".delete-item");

    addNewItemButton.onclick = async () => {
      const name = newItemNameInput.value;
      const price = Number(newItemPriceInput.value);
      const amount = Number(newItemAmountInput.value);

      if (!name || !price || !amount) {
        alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
        return;
      }

      const { data: item } = await actions.items.addItem({
        name, price, amount
      });

      if (!item) {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä!");
        return;
      }

      const reload = confirm("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É?");
      if (reload) {
        window.location.reload();
      }
    };

    saveItemButtons.forEach(button => button.onclick = async () => {
      const itemId = Number(button.dataset.itemId);
      if (itemId !== 0 && !itemId) {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä!");
        return;
      }

      const name = document.querySelector<HTMLInputElement>(`input[data-item-id="${itemId}"][data-name]`)?.value;
      const price = Number(document.querySelector<HTMLInputElement>(`input[data-item-id="${itemId}"][data-price]`)?.value);
      const amount = Number(document.querySelector<HTMLInputElement>(`input[data-item-id="${itemId}"][data-amount]`)?.value);
      if (!name || !price || !amount) {
        alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
        return;
      }

      const { data: item } = await actions.items.updateItem({
        id: itemId,
        name,
        price,
        amount
      });

      if (!item) {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä!");
        return;
      }

      const reload = confirm("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É?");
      if (reload) {
        window.location.reload();
      }
    });

    deleteItemButtons.forEach(button => button.onclick = async () => {
      const itemId = Number(button.dataset.itemId);
      if (itemId !== 0 && !itemId) {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä!");
        return;
      }

      const { data: item } = await actions.items.deleteItem(itemId);

      if (!item) {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä!");
        return;
      }

      const reload = confirm("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É?");
      if (reload) {
        window.location.reload();
      }
    });
  } else {
    const addToCartButtons = document.querySelectorAll<HTMLButtonElement>(".add-to-cart");
    const removeFromCartButtons = document.querySelectorAll<HTMLButtonElement>(".remove-from-cart");

    addToCartButtons.forEach(button => button.onclick = async () => {
      const itemId = Number(button.dataset.itemId);
      if (itemId !== 0 && !itemId) {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É!");
        return;
      }
      const { data: item } = await actions.user.setItemInCart({ userId: user!.id, itemId, amount: 1 });
      if (item) {
        window.location.reload();
      }
    });

    removeFromCartButtons.forEach(button => button.onclick = async () => {
      const itemId = Number(button.dataset.itemId);
      if (itemId !== 0 && !itemId) {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!");
        return;
      }
      const { data: item } = await actions.user.setItemInCart({ userId: user!.id, itemId, amount: 0 });
      if (item) {
        window.location.reload();
      }
    });
  }
</script>
